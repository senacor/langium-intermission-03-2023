"use strict";
/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.TinyDslAstReflection = exports.isType = exports.Type = exports.isKind = exports.Kind = exports.isField = exports.Field = exports.isEntity = exports.Entity = exports.isDocument = exports.Document = exports.isConnection = exports.Connection = exports.isMember = exports.Member = void 0;
/* eslint-disable */
const langium_1 = require("langium");
exports.Member = 'Member';
function isMember(item) {
    return exports.reflection.isInstance(item, exports.Member);
}
exports.isMember = isMember;
exports.Connection = 'Connection';
function isConnection(item) {
    return exports.reflection.isInstance(item, exports.Connection);
}
exports.isConnection = isConnection;
exports.Document = 'Document';
function isDocument(item) {
    return exports.reflection.isInstance(item, exports.Document);
}
exports.isDocument = isDocument;
exports.Entity = 'Entity';
function isEntity(item) {
    return exports.reflection.isInstance(item, exports.Entity);
}
exports.isEntity = isEntity;
exports.Field = 'Field';
function isField(item) {
    return exports.reflection.isInstance(item, exports.Field);
}
exports.isField = isField;
exports.Kind = 'Kind';
function isKind(item) {
    return exports.reflection.isInstance(item, exports.Kind);
}
exports.isKind = isKind;
exports.Type = 'Type';
function isType(item) {
    return exports.reflection.isInstance(item, exports.Type);
}
exports.isType = isType;
class TinyDslAstReflection extends langium_1.AbstractAstReflection {
    getAllTypes() {
        return ['Connection', 'Document', 'Entity', 'Field', 'Kind', 'Member', 'Type'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case exports.Connection:
            case exports.Field: {
                return this.isSubtype(exports.Member, supertype);
            }
            case exports.Type: {
                return this.isSubtype(exports.Field, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Connection:to': {
                return exports.Entity;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'Document': {
                return {
                    name: 'Document',
                    mandatory: [
                        { name: 'entities', type: 'array' }
                    ]
                };
            }
            case 'Entity': {
                return {
                    name: 'Entity',
                    mandatory: [
                        { name: 'members', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.TinyDslAstReflection = TinyDslAstReflection;
exports.reflection = new TinyDslAstReflection();
//# sourceMappingURL=ast.js.map