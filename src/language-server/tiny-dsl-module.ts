import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices
} from 'langium';
import { TinyDslDocumentSymbolProvider } from '../outline/tiny-dsl-document-symbol-provicer';
import { TinyDslScopeComputation } from '../scoping/scope-computation';
import { TinyDslGeneratedModule, TinyDslGeneratedSharedModule } from './generated/module';
import { TinyDslValidator, registerValidationChecks } from './tiny-dsl-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type TinyDslAddedServices = {
    validation: {
        TinyDslValidator: TinyDslValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type TinyDslServices = LangiumServices & TinyDslAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const TinyDslModule: Module<TinyDslServices, PartialLangiumServices & TinyDslAddedServices> = {
    validation: {
        TinyDslValidator: () => new TinyDslValidator()
    },
    references: {
        ScopeComputation: (services) => new TinyDslScopeComputation(services)
    },
    lsp: {
        DocumentSymbolProvider: (services) => new TinyDslDocumentSymbolProvider(services)
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createTinyDslServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    TinyDsl: TinyDslServices
} {
    console.log("createServices")
    const shared = inject(
        createDefaultSharedModule(context),
        TinyDslGeneratedSharedModule
    );
    const TinyDsl = inject(
        createDefaultModule({ shared }),
        TinyDslGeneratedModule,
        TinyDslModule
    );
    shared.ServiceRegistry.register(TinyDsl);
    registerValidationChecks(TinyDsl);
    return { shared, TinyDsl };
}
